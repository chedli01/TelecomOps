package rules
import com.coding.internship.product.model.Product
import com.coding.internship.product.enums.ProductCategory
import com.coding.internship.product.service.SpeceficService
import com.coding.internship.user.client.model.Client
import com.coding.internship.order.model.Order
import com.coding.internship.subscription.model.Subscription
import com.coding.internship.drools.dto.DataVerificationResult
import com.coding.internship.subscription.enums.SubscriptionStatus
import com.coding.internship.notification.sms.service.SmsService
import com.coding.internship.payment.model.Payment
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;


rule "Price Discount"
    agenda-group "pricing"
    no-loop true
    when
        $product : Product(price>1000)
    then
        System.out.println("Applied discount to " + $product.getId());
        modify($product){setPrice( $product.getPrice() - ($product.getPrice()*0.1))}
end
global String targetCategory;
global java.util.List modifiedProducts;

rule "Category Discount" no-loop true
    when
        $product : Product(category.name() == targetCategory, $originalPrice : price)
    then
        double newPrice = $originalPrice * 0.9; // 10% discount
        modify($product) {
            setPrice(newPrice)
        };
        modifiedProducts.add($product);
        System.out.println("Applied discount to " + $product.getId() + " with new price" + newPrice + "having as category"+ $product.getCategory());
end

rule "Order Discount For Students"
     agenda-group "discount"
     no-loop true
     when
       $order : Order($client:getClient(),client.isStudent==true)
     then
       modify($order){
       setDiscount($order.getTotal()*0.1+$order.getDiscount())
       }

       System.out.println("discount for student applied");

end

rule "Order Discount For Big Total "
    agenda-group "discount"
    no-loop true
    when
        $order : Order(getTotal()>1000,$client:client)
        $subscription : Subscription(client.getId()==$client.getId())
    then
        modify($order){
            setDiscount($order.getTotal()*0.2+$order.getDiscount())
                }
        modify($subscription){
            setRemainingData($subscription.getRemainingData()+1024)
        }
        System.out.println("discount for big total applied");
end

global Double consumedData;

rule "data verification"
    agenda-group "data"
    no-loop true
    when
       $subscription : Subscription(getRemainingData()>=consumedData,getStatus().equals(SubscriptionStatus.ACTIVE))
       $result : DataVerificationResult()



    then
       modify($result){
          setVerified(true)
       }
end
global SmsService smsService;

rule "notify On Data exhaustion"
    agenda-group "data"
    no-loop true
    when
    $subscription : Subscription(getRemainingData()-consumedData<getRemainingData()*0.2,getRemainingData()>=consumedData,getStatus().equals(SubscriptionStatus.ACTIVE))
    then
     smsService.sendSms("+216"+$subscription.getClient().getPhoneNumber(),"you have only 20% remaining data");



end

rule "late payment penalty"
      agenda-group "payment"
      no-loop true
      when
          $payment: Payment($days:ChronoUnit.DAYS.between(invoice.getDueDate(),getPaymentDate())>0)
      then
          modify($payment){
                 setAmount($payment.getAmount()*(1+0.1*$days))
          }
          System.out.println("late payment penalty applied"+$days);

end


//
//global SpeceficService productService;
//global Long ProductId;
//
//rule "Change Description"
//    agenda-group "renaming"
//    no-loop true
//    when
//        $product : Product(id==ProductId)
//    then
//        modify($product){
//        setDescription("changedddd")
//
//        }
//        System.out.println("Changed description of " + $product.getId());
//        productService.deleteProductById(ProductId);
//end