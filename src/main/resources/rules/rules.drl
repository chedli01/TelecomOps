package rules
import com.coding.internship.product.model.Product
import com.coding.internship.product.enums.ProductCategory
import com.coding.internship.product.service.SpeceficService
import com.coding.internship.user.client.model.Client
import com.coding.internship.order.model.Order
import com.coding.internship.subscription.model.Subscription
import com.coding.internship.drools.dto.DataVerificationResult
import com.coding.internship.drools.dto.VerificationResult
import com.coding.internship.drools.dto.CallVerificationRequest
import com.coding.internship.drools.dto.SmsVerificationRequest
import com.coding.internship.drools.dto.DataVerificationRequest
import com.coding.internship.subscription.enums.SubscriptionStatus
import com.coding.internship.notification.sms.service.SmsService
import com.coding.internship.notification.email.EmailService
import com.coding.internship.payment.model.Payment
import java.time.LocalDate;
import java.time.LocalDateTime;
import com.coding.internship.plan.model.Plan


import java.time.temporal.ChronoUnit;
import com.coding.internship.user.client.service.ClientService;
import com.coding.internship.plan.service.PlanService
import com.coding.internship.user.client.enums.ClientType
global Long previousSubPlanId




rule "Order Discount For Students"
     agenda-group "discount"
     no-loop true
     when
       $order : Order($client:getClient(),client.isStudent==true)
     then
       modify($order){
       setDiscount($order.getTotal()*0.1+$order.getDiscount())
       }

       System.out.println("discount for student order applied");

end
/////////////////////////////////////////////////
rule "Order Discount For Big Total "
    agenda-group "discount"
    no-loop true
    when
        $order : Order(getTotal()>1000,$client:client)
        $subscription : Subscription(client.getId()==$client.getId())
    then
        modify($order){
            setDiscount($order.getTotal()*0.2+$order.getDiscount())
                }
        modify($subscription){
            setRemainingData($subscription.getRemainingData()+1024)
        }
        System.out.println("discount for big order total applied");
end


///////////////////////////////////
rule "Upgrade client to vip on big orders total "
    agenda-group "discount"
    no-loop true
    when
        $client : Client()
        $order : Order(getTotal()>5000,client.getId()==$client.getId())

    then
        modify($client){
            setType(ClientType.VIP)
                }

        System.out.println("Upgrade client to vip on big orders total");
end
//////////////////////////////////////////////////////////////
rule "data verification"
    agenda-group "data"
    no-loop true
    when
        $request : DataVerificationRequest()
        $subscription : Subscription(getRemainingData()>=$request.getConsumedData(),getStatus().equals(SubscriptionStatus.ACTIVE))
        $result : DataVerificationResult()



    then
       modify($result){
          setVerified(true)
       }
end
////////////////////////////////////////////////////////////
rule "notify On Data exhaustion"
    agenda-group "data"
    no-loop true
    when
        $request : DataVerificationRequest()
        $subscription : Subscription(getStatus() == SubscriptionStatus.ACTIVE,getRemainingData()>$request.getConsumedData(),getRemainingData()-$request.getConsumedData()<getRemainingData()*0.2)
        $result : DataVerificationResult()
    then
        modify($result){
            setSendSmsAlert(true)
            }
        System.out.println("data exhausted");
end
/////////////////////////////////////////////
rule "80% peak on data usage"
    agenda-group "data"
    no-loop true
    when
        $request : DataVerificationRequest()
        $subscription : Subscription(getStatus() == SubscriptionStatus.ACTIVE,getRemainingData()>=$request.getConsumedData(),getRemainingData()-$request.getConsumedData()<getRemainingData()*0.2)
        eval(ChronoUnit.DAYS.between(LocalDate.now(), $subscription.getEndDate()) > 20)
        $result : DataVerificationResult()
    then
      modify($result){
            setSendEmailUpgradeRecommendation(true)
      }
     System.out.println("recommend a plan upgrade ");
end
/////////////////////////////////////////////////////
rule "upgrade to VIP"
    agenda-group "data"
    no-loop true
    when
        $request : DataVerificationRequest()
        $subscription : Subscription(getStatus() == SubscriptionStatus.ACTIVE,getRemainingData()>=$request.getConsumedData(),$request.getTotalData()+$request.getConsumedData()>=100000,!client.getType().equals(ClientType.VIP))
        $result : DataVerificationResult()
    then
      modify($result){
            setUpgradeClientToVip(true)
      }
     System.out.println(" upgrade user to VIP ");
end
///////////////////////////////////////////////////////
rule "late payment penalty"
      agenda-group "payment"
      no-loop true
      when
          $payment: Payment($days:ChronoUnit.DAYS.between(invoice.getDueDate(),getPaymentDate())>0)
      then
          modify($payment){
                 setAmount($payment.getAmount()*(1+0.01*$days))
          }
          System.out.println("late payment penalty applied"+$days);

end
///////////////////////////////////////////////////////
rule "Early payment gift"
      agenda-group "payment"
      no-loop true
      when
          $payment: Payment(ChronoUnit.DAYS.between(invoice.getDueDate(),getPaymentDate())==0)
      then
          modify($payment){
                 setAmount($payment.getAmount()*(1-0.05))
          }
          System.out.println("early payment gift applied");

end






///////////////////////////////////////

rule "discount on renewing sub"
      agenda-group "discount"
      no-loop true
      when
           $subscription: Subscription($plan : plan, $planId : plan.id)
           eval(previousSubPlanId != null && previousSubPlanId.equals($planId))

      then
          modify($subscription){
                setDiscount(0.1*$plan.getPrice())
          }
          System.out.println("discount on renewing sub applied");

end
/////////////////////////
rule "previlege VIP client"
      agenda-group "sub"
      no-loop true
      when
           $subscription: Subscription($plan:plan,$startDate:getStartDate(),client.getType().equals(ClientType.VIP))

      then
          modify($subscription){
                setRemainingData($subscription.getRemainingData()*1.5)
          }
          modify($subscription){
                setRemainingCalls($subscription.getRemainingCalls()*1.5)
          }
          modify($subscription){
                setRemainingSms($subscription.getRemainingSms()*2)
                    }
          modify($subscription){
                setEndDate($startDate.plusDays($plan.getValidityDays()*2))
                    }
          System.out.println("VIP client privilege  applied ");

end
//////////////////////////////////////////////////////////////////
rule "call balance verification"
      agenda-group "calls"
      no-loop true
      when
         $request : CallVerificationRequest()
         $subscription : Subscription(getStatus().equals(SubscriptionStatus.ACTIVE),getRemainingCalls()>=$request.getMinutesConsumed())
         $result : VerificationResult()



      then
         modify($result){
            setValid(true)
         }
         System.out.println("call balance verification applied");

end
////////////////////////////////////////////////////
rule "gift  verification"
      agenda-group "calls"
      no-loop true
      when
         $request : CallVerificationRequest()
         $subscription : Subscription(getStatus().equals(SubscriptionStatus.ACTIVE),getRemainingCalls()>=$request.getMinutesConsumed(),$request.getTotalConsumed()<1000,$request.getMinutesConsumed()+$request.getTotalConsumed()>1000)
         $result : VerificationResult()



      then
         modify($result){
            setGetGift(true)
         }
         System.out.println("gift verification applied");

end
///////////////////////////////////////////////////////////////////
rule "sms balance verification"
      agenda-group "sms"
      no-loop true
      when
         $request : SmsVerificationRequest()
         $subscription : Subscription(getStatus().equals(SubscriptionStatus.ACTIVE),getRemainingSms()>=$request.getSmsConsumed())
         $result : VerificationResult()
      then
         modify($result){
            setValid(true)
         }
         System.out.println("sms balance verification applied");
end
///////////////////////////////////////////////////
rule "discount on upgrading sub"
      agenda-group "discount"
      no-loop true
      when

           $subscription: Subscription($plan : plan)
           $previousPlan : Plan($prevId:id)
           eval($previousPlan.getPrice()<$plan.getPrice())


      then
          modify($subscription){
                setDiscount(0.2*$plan.getPrice())
          }
          System.out.println("discount on upgrading sub applied");

end
